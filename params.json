{"name":"Ciconia","tagline":"A New Markdown parser for PHP5.4","body":"Ciconia - A New Markdown Parser for PHP\r\n=======================================\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/kzykhys/ciconia/v/stable.png)](https://packagist.org/packages/kzykhys/ciconia)\r\n[![Build Status](https://travis-ci.org/kzykhys/Ciconia.png?branch=master)](https://travis-ci.org/kzykhys/Ciconia)\r\n[![Coverage Status](https://coveralls.io/repos/kzykhys/Ciconia/badge.png?branch=master)](https://coveralls.io/r/kzykhys/Ciconia?branch=master)\r\n\r\n**This project is _unstable_** until 1.0.0 (see [milestones][milestones])\r\n\r\nThe Markdown parser for PHP5.4, it is fully extensible.\r\nCiconia is the collection of extension, so you can replace, add or remove each parsing mechanism.\r\n\r\n*   Based on John Gruber's Markdown.pl\r\n\r\n*   [Github Flavored Markdown](https://help.github.com/articles/github-flavored-markdown) support (disabled by default)\r\n\r\n    * Multiple underscores in words\r\n    * New lines\r\n    * Fenced code blocks\r\n    * Task lists\r\n    * Table\r\n    * URL Autolinking\r\n\r\n*   Tested with [karlcow/markdown-testsuite](https://github.com/karlcow/markdown-testsuite)\r\n\r\nRequirements\r\n------------\r\n\r\n* PHP5.4+\r\n* Composer\r\n\r\nInstallation\r\n------------\r\n\r\ncreate a `composer.json`\r\n\r\n``` json\r\n{\r\n    \"require\": {\r\n        \"kzykhys/ciconia\": \"dev-master\"\r\n    }\r\n}\r\n```\r\n\r\nand run\r\n\r\n```\r\nphp composer.phar install\r\n```\r\n\r\nUsage\r\n-----\r\n\r\n### Traditional Markdown\r\n\r\n``` php\r\nuse Ciconia\\Ciconia;\r\n\r\n$ciconia = new Ciconia();\r\n$html = $ciconia->render('Markdown is **awesome**');\r\n\r\n// <p>Markdown is <em>awesome</em></p>\r\n```\r\n\r\n### Github Flavored Markdown\r\n\r\nTo activate 6 gfm features:\r\n\r\n``` php\r\nuse Ciconia\\Ciconia;\r\nuse Ciconia\\Extension\\Gfm;\r\n\r\n$ciconia = new Ciconia();\r\n$ciconia->addExtension(new Gfm\\FencedCodeBlockExtension());\r\n$ciconia->addExtension(new Gfm\\TaskListExtension());\r\n$ciconia->addExtension(new Gfm\\InlineStyleExtension());\r\n$ciconia->addExtension(new Gfm\\WhiteSpaceExtension());\r\n$ciconia->addExtension(new Gfm\\TableExtension());\r\n$ciconia->addExtension(new Gfm\\UrlAutoLinkExtension());\r\n\r\n$html = $ciconia->render('Markdown is **awesome**');\r\n\r\n// <p>Markdown is <em>awesome</em></p>\r\n```\r\n\r\n### Options\r\n\r\nOption             | Type    | Default | Description                   |\r\n-------------------|---------|---------|-------------------------------|\r\n**tabWidth**       | integer | 4       | Number of spaces              |\r\n**nestedTagLevel** | integer | 3       | Max depth of nested HTML tags |\r\n**strict**         | boolean | false   | Throws exception if markdown contains syntax error |\r\n\r\n``` php\r\nuse Ciconia\\Ciconia;\r\n\r\n$ciconia = new Ciconia();\r\n$html = $ciconia->render(\r\n    'Markdown is **awesome**',\r\n    ['tabWidth' => 8, 'nestedTagLevel' => 5, 'strict' => true]\r\n);\r\n```\r\n\r\nRendering HTML or XHTML\r\n-----------------------\r\n\r\nCiconia renders HTML by default. If you prefer XHTML:\r\n\r\n``` php\r\nuse Ciconia\\Ciconia;\r\nuse Ciconia\\Renderer\\XhtmlRenderer;\r\n\r\n$ciconia = new Ciconia(new XhtmlRenderer());\r\n$html = $ciconia->render('Markdown is **awesome**');\r\n\r\n// <p>Markdown is <em>awesome</em></p>\r\n```\r\n\r\nExtend Ciconia\r\n--------------\r\n\r\n### How to Extend\r\n\r\nCreating extension is easy, just implement `Ciconia\\Extension\\ExtensionInterface`.\r\n\r\nYour class must implement 2 methods.\r\n\r\n#### _void_ register(`Ciconia\\Markdown` $markdown)\r\n\r\nRegister your callback to markdown event manager.\r\n`Ciconia\\Markdown` is instance of `Ciconia\\Event\\EmitterInterface` (looks like Node.js's EventEmitter)\r\n\r\n#### _string_ getName()\r\n\r\nReturns the name of your extension.\r\nIf your name is the same as one of core extension, it will be replaced by your extension.\r\n\r\n### Extension Example\r\n\r\nThis sample extension turns `@username ` mentions into links.\r\n\r\n``` php\r\n<?php\r\n\r\nuse Ciconia\\Common\\Text;\r\nuse Ciconia\\Extension\\ExtensionInterface;\r\n\r\nclass MentionExtension implements ExtensionInterface\r\n{\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public function register(\\Ciconia\\Markdown $markdown)\r\n    {\r\n        $markdown->on('inline', [$this, 'processMentions']);\r\n    }\r\n\r\n    /**\r\n     * @param Text $text\r\n     */\r\n    public function processMentions(Text $text)\r\n    {\r\n        // Turn @username into [@username](http://example.com/user/username)\r\n        $text->replace('/(?:^|[^a-zA-Z0-9.])@([A-Za-z]+[A-Za-z0-9]+)/', function (Text $w, Text $username) {\r\n            return '[@' . $username . '](http://example.com/user/' . $username . ')';\r\n        });\r\n    }\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public function getName()\r\n    {\r\n        return 'mention';\r\n    }\r\n}\r\n```\r\n\r\nRegister your extension.\r\n\r\n``` php\r\n<?php\r\n\r\nrequire __DIR__ . '/vendor/autoload.php';\r\n\r\n$ciconia = new \\Ciconia\\Ciconia();\r\n$ciconia->addExtension(new MentionExtension());\r\necho $ciconia->render('@kzykhys my email address is example@example.com!');\r\n```\r\n\r\nOutput\r\n\r\n``` html\r\n<p><a href=\"http://example.com/user/kzykhys\">@kzykhys</a> my email address is example@example.com!</p>\r\n```\r\n\r\nEach extension handles string as a `Text` object. See [API section of kzykhys/Text][textapi].\r\n\r\n### Events\r\n\r\nPossible events are:\r\n\r\n| Event      | Description                                                                               |\r\n|------------|-------------------------------------------------------------------------------------------|\r\n| initialize | Document level parsing. Called at the first of the sequence.                              |\r\n| block      | Block level parsing. Called after `initialize`                                            |\r\n| inline     | Inline level parsing. Generally called by block level parsers.                            |\r\n| detab      | Convert tabs to spaces. Generally called by block level parsers.                          |\r\n| outdent    | Remove one level of line-leading tabs or spaces. Generally called by block level parsers. |\r\n| finalize   | Called after `block`                                                                      |\r\n\r\n[See the source code of Extensions](src/Ciconia/Extension)\r\n\r\n[See events and timing information](https://gist.github.com/kzykhys/7443440)\r\n\r\n### Create your own Renderer\r\n\r\nCiconia supports HTML/XHTML output. but if you prefer customizing the output,\r\njust create a class that implements `Ciconia\\Renderer\\RendererInterface`.\r\n\r\nSee [Ciconia\\Renderer\\RendererInterface](src/Ciconia/Renderer/RendererInterface.php)\r\n\r\nCommand Line Interface\r\n----------------------\r\n\r\n### Usage\r\n\r\nBasic Usage: (Outputs result to STDOUT)\r\n\r\n    ciconia /path/to/file.md\r\n\r\nFollowing command saves result to file:\r\n\r\n    ciconia /path/to/file.md > /path/to/file.html\r\n\r\nOr using pipe (On Windows in does't work):\r\n\r\n    echo \"Markdown is **awesome**\" | ciconia\r\n\r\n### Command Line Options\r\n\r\n```\r\n --gfm                 Activate Gfm extensions\r\n --compress (-c)       Remove whitespace between HTML tags\r\n --format (-f)         Output format (html|xhtml) (default: \"html\")\r\n --lint (-l)           Syntax check only (lint)\r\n```\r\n\r\n### Where is the script?\r\n\r\nCLI script will be installed in `vendor/bin/ciconia` by default.\r\nTo change the location:\r\n\r\n> Yes, there are two ways an alternate vendor binary location can be specified:\r\n>\r\n> 1. Setting the bin-dir configuration setting in composer.json\r\n> 2. Setting the environment variable COMPOSER_BIN_DIR\r\n\r\n[http://getcomposer.org/doc/articles/vendor-binaries.md](http://getcomposer.org/doc/articles/vendor-binaries.md)\r\n\r\n### Using PHAR version\r\n\r\nYou can also use [single phar file][phar]\r\n\r\n```\r\nciconia.phar /path/to/file.md\r\n```\r\n\r\nIf you prefer access this command globally, download [ciconia.phar][phar] and move it into your `PATH`.\r\n\r\n```\r\nmv ciconia.phar /usr/local/bin/ciconia\r\n```\r\n\r\nTesting\r\n-------\r\n\r\nInstall or update `dev` dependencies.\r\n\r\n```\r\nphp composer.phar update --dev\r\n```\r\n\r\nand run `phpunit`\r\n\r\nLicense\r\n-------\r\n\r\nThe MIT License\r\n\r\nContributing\r\n------------\r\n\r\nFeel free to folk this repository and send a pull request. ([A list of contributors][contributors])\r\n\r\nAuthor\r\n------\r\n\r\nKazuyuki Hayashi (@kzykhys)\r\n\r\n\r\n[milestones]: https://github.com/kzykhys/Ciconia/issues/milestones\r\n[phar]: https://github.com/kzykhys/Ciconia/releases/download/v0.1.7/ciconia.phar\r\n[contributors]: https://github.com/kzykhys/Ciconia/graphs/contributors\r\n[textapi]: https://github.com/kzykhys/Text#api","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}